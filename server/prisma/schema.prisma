generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  clerkId   String   @unique
  role      Role     @default(USER)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  tickets Ticket[] // Relationship to Ticket model
  reviews Review[] // Relationship to Review model
  wallet  Wallet[] // Relationship to User model
}

model Movie {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  rating            Float               @default(0.0)
  images            String[]
  ticketCost        Float               @default(10)
  timings           String[]
  languages         String[]
  genres            String[]
  isMovieAvailable  Boolean             @default(true)
  movieSeatCapacity Int                 @default(100)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Review            Review[] // Relationship to Review model
  Seat              Seat[] // Relationship to Seat model
  tickets           Ticket[] // Relationship to Ticket model
  WalletTransaction WalletTransaction[] // Relationship to WalletTransaction model

  @@index([isMovieAvailable])
}

model Seat {
  id         Int        @id @default(autoincrement())
  seatNumber String
  status     SeatStatus @default(AVAILABLE) // Ensure this line is present
  movie      Movie      @relation(fields: [movieId], references: [id])
  movieId    Int
  ticket     Ticket?    @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  ticketId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([movieId, seatNumber])
  @@index([movieId, status])
}

model Ticket {
  id        Int     @id @default(autoincrement())
  count     Int
  cost      Float
  timing    String
  totalCost Float
  isExpired Boolean @default(false)

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? // Foreign key for the user who booked the ticket
  Seat   Seat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId,isExpired])
}

model Review {
  id      Int    @id @default(autoincrement())
  content String
  rating  Float  @default(0.0)

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // Foreign key for the user who wrote the review

  createdAt DateTime @default(now())
}

model Wallet {
  id           String              @id @default(uuid())
  balance      Float               @default(0.0)
  transactions WalletTransaction[]
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WalletTransaction {
  id        String          @id @default(uuid())
  walletId  String
  amount    Float
  type      TransactionType
  movieId   Int?
  movie     Movie?          @relation(fields: [movieId], references: [id])
  createdAt DateTime        @default(now())
  wallet    Wallet          @relation(fields: [walletId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  ADD
  DEDUCT
  REFUND
  PAY
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  BOOKED
}
